"use client";

import { useState, useEffect } from "react";
import { Phone, PhoneOff } from "lucide-react";
import { Button } from "@/components/ui/button";

interface Message {
  text: string;
  sender: "user" | "ai";
  delay?: number;
}

const messages: Message[] = [
  { text: "Client is speaking...", sender: "user", delay: 3000 },
  { text: "‡§Æ‡•à‡§Ç ‡§è‡§Æ‡•á‡§ï‡•ç‡§∏‡§∏ ‡§è‡§Ü‡§à ‡§ï‡•Ä ‡§ì‡§∞ ‡§∏‡•á ‡§è‡§ï ‡§µ‡•á‡§Ç‡§°‡§∞ ‡§∏‡•ã‡§∞‡•ç‡§∏‡§ø‡§Ç‡§ó ‡§è‡§ú‡•á‡§Ç‡§ü ‡§π‡•Ç‡§Å, ‡§ú‡•ã ‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§ï‡•Ä‡§Æ‡§§ ‡§™‡§∞ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡•ã‡§Ç ‡§ï‡•Ä ‡§ñ‡§∞‡•Ä‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§ø‡§µ‡§∞‡•ç‡§∏ ‡§¨‡§ø‡§°‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡§§‡§æ ‡§∞‡§ñ‡§§‡•Ä ‡§π‡•Ç‡§Å‡•§ ‡§Æ‡•á‡§∞‡§æ ‡§ï‡§æ‡§Æ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§∏‡•á ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§è‡§Å ‡§∏‡§Æ‡§ù‡§®‡§æ, ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ‡§ì‡§Ç ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡§®‡§æ, ‡§î‡§∞ ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡•å‡§¶‡§æ ‡§§‡§Ø ‡§ï‡§∞‡§®‡§æ ‡§π‡•à‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•Ç‡§Å?", sender: "ai", delay: 2000 },
  { text: "Client is speaking...", sender: "user", delay: 4000 },
  { text: "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§â‡§ö‡•ç‡§ö ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§µ‡§æ‡§≤‡•á ‡§®‡§ü‡•ç‡§∏ ‡§î‡§∞ ‡§¨‡•ã‡§≤‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§≠‡§∞‡•ã‡§∏‡•á‡§Æ‡§Ç‡§¶ ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§ï‡•Ä ‡§§‡§≤‡§æ‡§∂ ‡§ï‡§∞ ‡§∞‡§π‡•Ä ‡§π‡•Ç‡§Å‡•§", sender: "ai", delay: 2500 },
  { text: "Client is speaking...", sender: "user", delay: 4000 },
  { text: "‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§®‡§ü‡•ç‡§∏ ‡§î‡§∞ ‡§¨‡•ã‡§≤‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§Æ‡§ø‡§≤ ‡§ó‡§è ‡§π‡•à‡§Ç‡•§ ‡§Ö‡§¨ ‡§Æ‡•à‡§Ç ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§µ‡§ø‡§ï‡•ç‡§∞‡•á‡§§‡§æ ‡§∏‡•á ‡§è‡§ï-‡§è‡§ï ‡§ï‡§∞‡§ï‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡•Ä ‡§§‡§æ‡§ï‡§ø ‡§®‡§ü‡•ç‡§∏ ‡§î‡§∞ ‡§¨‡•ã‡§≤‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§â‡§®‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡•Ç‡§Ç‡•§ ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§¨‡§∏‡•á ‡§¨‡•á‡§π‡§§‡§∞‡•Ä‡§® ‡§∏‡•å‡§¶‡•á ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•Ç‡§Ç‡§ó‡•Ä!", sender: "ai", delay: 3500 },
  { text: "Client is speaking...", sender: "user", delay: 5000 },
  { text: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§Ö‡§Æ‡§ø‡§§, ‡§Æ‡•Å‡§ù‡•á ‡§¨‡•Ä‡§∏ ‡§®‡§ü‡•ç‡§∏ ‡§î‡§∞ ‡§¨‡•ã‡§≤‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§®‡§ü‡•ç‡§∏ ‡§î‡§∞ ‡§¨‡•ã‡§≤‡•ç‡§ü‡•ç‡§∏ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§î‡§∞ ‡§™‡•ç‡§∞‡§§‡§ø ‡§Ø‡•Ç‡§®‡§ø‡§ü ‡§ï‡•Ä‡§Æ‡§§ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç? ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ú‡§≤‡•ç‡§¶ ‡§∏‡•á ‡§ú‡§≤‡•ç‡§¶ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§", sender: "ai", delay: 4500 },
];

export default function PhoneInterface() {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isCallActive, setIsCallActive] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);

  useEffect(() => {
    if (isCallActive) {
      handleMessageFlow();
    }
  }, [currentIndex, isCallActive]);

  const handleMessageFlow = () => {
    if (currentIndex >= messages.length) {
      setIsCallActive(false); // Stop the call if all messages are done
      return;
    }

    const currentMessage = messages[currentIndex];
    if (!currentMessage) return; // Prevent accessing undefined properties

    const delay = currentMessage.delay || 2000; // Default delay

    if (currentMessage.sender === "ai") {
      speakText(currentMessage.text, delay);
    } else {
      setTimeout(() => setCurrentIndex((prev) => prev + 1), delay);
    }
  };

  const speakText = (text: string, delay: number) => {
    setIsSpeaking(true);
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = "hi-IN";

    utterance.onend = () => {
      setIsSpeaking(false);
      setTimeout(() => {
        setCurrentIndex((prevIndex) => prevIndex + 1);
      }, delay);
    };

    speechSynthesis.speak(utterance);
  };

  const handleCall = () => {
    setIsCallActive(true);
    setCurrentIndex(0);
  };

  const handleEndCall = () => {
    setIsCallActive(false);
    setCurrentIndex(0);
    speechSynthesis.cancel();
  };

  return (
    <div className="mt-8 w-full max-w-xs mx-auto">
      <div className="bg-gray-900 rounded-xl overflow-hidden border border-gray-800 shadow-lg">
        <div className="p-6 bg-gray-800 flex flex-col items-center">
          <div className="w-16 h-16 rounded-full bg-gray-700 mb-4 flex items-center justify-center">
            <span className="text-2xl">üéôÔ∏è</span>
          </div>
          <div className="text-center">
            <h3 className="font-medium text-lg">Voice AI Assistant</h3>
            <p className="text-gray-400 text-sm">{isCallActive ? "In Call" : "Ready to Call"}</p>
          </div>
          {isCallActive && currentIndex < messages.length && (
            <div className="mt-4 text-green-500 font-mono">{messages[currentIndex]?.text}</div>
          )}
        </div>
        <div className="p-4 flex justify-center gap-8">
          <Button onClick={handleCall} disabled={isCallActive} className={`rounded-full w-16 h-16 ${isCallActive ? "bg-gray-700" : "bg-green-600 hover:bg-green-700"}`}>
            <Phone className="h-6 w-6" />
          </Button>
          <Button onClick={handleEndCall} disabled={!isCallActive} className={`rounded-full w-16 h-16 ${!isCallActive ? "bg-gray-700" : "bg-red-600 hover:bg-red-700"}`}>
            <PhoneOff className="h-6 w-6" />
          </Button>
        </div>
      </div>
      {isCallActive && currentIndex < messages.length && messages[currentIndex]?.sender === "user" && (
        <div className="absolute top-10 left-1/2 transform -translate-x-1/2 bg-blue-500 text-white px-4 py-2 rounded-md shadow-md animate-bounce">
          Client is speaking...
        </div>
      )}
    </div>
  );
}
